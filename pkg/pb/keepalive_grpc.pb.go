// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// KeepAliveClient is the client API for KeepAlive service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type KeepAliveClient interface {
	Echo(ctx context.Context, opts ...grpc.CallOption) (KeepAlive_EchoClient, error)
}

type keepAliveClient struct {
	cc grpc.ClientConnInterface
}

func NewKeepAliveClient(cc grpc.ClientConnInterface) KeepAliveClient {
	return &keepAliveClient{cc}
}

func (c *keepAliveClient) Echo(ctx context.Context, opts ...grpc.CallOption) (KeepAlive_EchoClient, error) {
	stream, err := c.cc.NewStream(ctx, &_KeepAlive_serviceDesc.Streams[0], "/keepalive.v1.KeepAlive/Echo", opts...)
	if err != nil {
		return nil, err
	}
	x := &keepAliveEchoClient{stream}
	return x, nil
}

type KeepAlive_EchoClient interface {
	Send(*Packet) error
	Recv() (*Packet, error)
	grpc.ClientStream
}

type keepAliveEchoClient struct {
	grpc.ClientStream
}

func (x *keepAliveEchoClient) Send(m *Packet) error {
	return x.ClientStream.SendMsg(m)
}

func (x *keepAliveEchoClient) Recv() (*Packet, error) {
	m := new(Packet)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// KeepAliveServer is the server API for KeepAlive service.
// All implementations must embed UnimplementedKeepAliveServer
// for forward compatibility
type KeepAliveServer interface {
	Echo(KeepAlive_EchoServer) error
	mustEmbedUnimplementedKeepAliveServer()
}

// UnimplementedKeepAliveServer must be embedded to have forward compatible implementations.
type UnimplementedKeepAliveServer struct {
}

func (UnimplementedKeepAliveServer) Echo(KeepAlive_EchoServer) error {
	return status.Errorf(codes.Unimplemented, "method Echo not implemented")
}
func (UnimplementedKeepAliveServer) mustEmbedUnimplementedKeepAliveServer() {}

// UnsafeKeepAliveServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to KeepAliveServer will
// result in compilation errors.
type UnsafeKeepAliveServer interface {
	mustEmbedUnimplementedKeepAliveServer()
}

func RegisterKeepAliveServer(s grpc.ServiceRegistrar, srv KeepAliveServer) {
	s.RegisterService(&_KeepAlive_serviceDesc, srv)
}

func _KeepAlive_Echo_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(KeepAliveServer).Echo(&keepAliveEchoServer{stream})
}

type KeepAlive_EchoServer interface {
	Send(*Packet) error
	Recv() (*Packet, error)
	grpc.ServerStream
}

type keepAliveEchoServer struct {
	grpc.ServerStream
}

func (x *keepAliveEchoServer) Send(m *Packet) error {
	return x.ServerStream.SendMsg(m)
}

func (x *keepAliveEchoServer) Recv() (*Packet, error) {
	m := new(Packet)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _KeepAlive_serviceDesc = grpc.ServiceDesc{
	ServiceName: "keepalive.v1.KeepAlive",
	HandlerType: (*KeepAliveServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Echo",
			Handler:       _KeepAlive_Echo_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "v1/keepalive.proto",
}
